1) Versioning The Project : ( Create local git repo Either from Server or for project residing on local machine)

  -> From local : git init

  -> from Remote(existing) : git clone <url>


2) Get Overview of changes : 

  -> git status   ( locally ) 


3) Staging & Commiting : 

  -> git add <filenames_to_includes_by_space>

     git add -A  ( all files ) 

     git rm <filename_to_remove>

     git commit 

     git commit -m "commit Message Here" 

     git log   ( display commit history )
     
     git log --pretty=oneline   ( display commit in one line )
     
     git log --pretty=format:" " 
     
     git log --pretty=oneline --abbrev-commit ( display commit hash followed by commit name simply)
     
     git log --author='name_of_the_author' --pretty=oneline --abbrev-commit   
     
     git log --graph   ( display logs in form of graph )
     
     git log -p -2     (Here p stands for patch, it will show changes amended 
                             2 denotes latest 2 changes )
                             
     git log --since = 2.weeks                         ( get list of commit according to mentioned date or week or month)
                     = "2008-01-15"
                     = "2 years 1 day 3 minutes ago"   
                     
     git log --walk-reflogs branchName   ( get commit of that particular branch, avoiding commits from parent master )
     
     git log mybranch --not $(git for-each-ref --format='%(refname)' refs/heads/ | grep -v "refs/heads/mybranch" 
                                        ( get commit of that particular branch, avoiding commits from parent master )
                                        [ When --walk-reflogs won't work ] -


4) branching : 

  -> git branch <branch_name>   ( create new local branch with branch_name from current branch )

     git branch       ( list all branches in current project ) 
 
     git branch -a    ( list all branches local as well as remote ) 

     git branch -v    ( some more additional info. with branch name ) 

     git branch -va   ( list of all branches involving both local & remote with some more additional info. )

     git branch -d <branch_name>  ( delete branch with given branch_name locally if changes are merged fully)
     
     git branch -D <branch_name>  ( delete branch with given branch_name locally, forcefully )
     
     git branch -f <source_bname> <HEAD~3>  ( moves master branch by force 3 parents behind, Moving) 
     
     git branch -m <new_branch_name>  ( rename current pointed branch, locally )
     
     git branch -m <old_branch_name> <new_branch_name>  ( rename branch other than current Headed branch )
     
     git branch --unset-upstream   ( remove upstream branch for current local branch ) 
     
     git branch branch_name --set-upstream-to new_remote/branch_name  ( edit upstream of current branch )
     
     
     
12) Merging :

   -> git merge <branch_name_to_merge_into_current_branch>  ( Merge given branchname into present (HEAD) branch )
   
   
11) Rebasing : 
   
   -> git rebase <branch_2>  ( It will commits all changes in branch_2 upto common ancestor ( with branch_1 ) )

                             ( then it will commit changes in branch_1 to the integrated commit from branch_2 )

5) Stashing : 

  -> git stash 

     git stash list

     git stash pop    ( apply newest stash and remove that from stash list ) 

     git stash apply <stashname>   ( stash will remain saved in clipboard ) 


6) Checkout & Merge : 
  
  -> git checkout <branch_name>  ( switch to newly created branch ) 
  
  -> git checkout -b <branch_name> ( create new branch & switch to newly created branch) 
  
  -> git merge <branch_name_to_merge_in_current_working_copy_or_head_branch>
  
  -> git checkout <hash_or_starting_few_hashIdentifier_of_commit>  (detaching HEAD, making it point to commit instead of branch)


7) Connecting Remote Repo : 

  -> git remote add <remote_repo_name>  ( will create new relation with existing remote repo on server i.e github ) 

     					(*NOTE : Only relation will be created , & no data will be exchanged by above cmd )

  -> git fetch <remote_repo_name>       ( Now data will be exchanged ) 


8) Working on remote branch :

  -> git checkout --track <remote_repo_name>/<remote_branch_name>

     git push <remote_repo_name> <remoteRepo_branch_name>  ( push changes on remote server ) 

     git push    ( If remote branch has been tracked already )  

     git pull    ( If remote branch has been tracked already )  

     git pull <remote_repo_name> <remoteRepo_branch_name>  ( pull changes from remote server ) 

     git push <origin> --delete <branch_name_to_be_deleted_on_remote> ( delete branch on remote )  
     
     git push origin -u branch_to_be_setted_as_upstream  ( seeting )
     
     git push -f <origin> branchName  ( force push )


9) Publish a local branch :
  
  -> git push -u <origin> <remote_branch_name_to_be_created>  ( publish current local head to reote origin under name given in parameter )

                     ( The "-u" flag establishes a tracking connection between that newly created branch on the remote and our local "contact-form" branch )
         
                     ( tracking relationship can be seen in square brackets in git branch command ) 


10) Undoing changes :

   -> git commit --amend -m <"This is Correct commit message">
 
   -> git checkout HEAD <path_to_file_to_be_restored_to_its_last_commited_version>  ( To restore file to its last commited version ) 

                                                                                    ( it will discard any uncommited local changes in the file ) 

   -> git reset --hard HEAD  ( replace files in Working Copy with Head i.e last commited revision ) 
               
                             ( --hard will discard all local changes ) 

   -> git revert <hash_of_the_commit_you_want_to_revert_to>

   -> git reset --hard <hash_of_the_commit_you_want_to_revert_to>    ( --hard will discard all local changes ) 

   -> git merge --abort  ( return to state before starting merge )

   -> git reset --hard
 
 11) Find Number of commmit behind from Upstream
 
   ->  git rev-list remotes/origin/Development..Development --count

 12) cherry - pick :
 
   -> git cherry-pick commitHash  ( this will pick particular commit with hash & append it to current branch HEAD )



    
